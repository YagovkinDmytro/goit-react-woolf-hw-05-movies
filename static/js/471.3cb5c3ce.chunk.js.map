{"version":3,"file":"static/js/471.3cb5c3ce.chunk.js","mappings":"yPA4BA,EA5BiB,SAAHA,GAAsB,IAAhBC,EAAQD,EAARC,SAGlB,OAAOA,GAAYA,EAASC,OAAS,GACnCC,EAAAA,EAAAA,KAAA,MAAAC,SACGH,EAASI,KAAI,SAAAC,GAAqD,IAAlDC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAASH,EAATG,UAAWC,EAAEJ,EAAFI,GACvD,OACEC,EAAAA,EAAAA,MAAA,MAAAP,SAAA,EACED,EAAAA,EAAAA,KAAA,OACES,IACEL,EAAY,mCAAAM,OAC2BN,GATnD,8DAYUO,MAAO,IACPC,IAAI,YAENZ,EAAAA,EAAAA,KAAA,KAAAC,SAAII,KACJG,EAAAA,EAAAA,MAAA,KAAAP,SAAA,CAAG,cAAYK,OAXRC,EAcb,OAGFP,EAAAA,EAAAA,KAAA,KAAAC,SAAG,OAEP,E,2BCeA,EAnCa,WACX,IAAAY,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCf,EAAQiB,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAAwCJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAkCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBG,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OApBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAIA,IAAMG,EAAc,eAAAhC,GAAAiC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGC,OAHDF,EAAAC,KAAA,EAEnBV,GAAa,GACbJ,EAAgB,IAAIa,EAAAE,KAAA,GACDC,EAAAA,EAAAA,IAAkBX,GAAS,KAAD,EAAvCO,EAAIC,EAAAI,KACVrB,EAAYgB,EAAKM,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEvBb,EAAgBa,EAAAM,GAAMC,SAAS,QAEX,OAFWP,EAAAC,KAAA,GAE/BV,GAAa,GAAOS,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAEvB,kBAXmB,OAAAnC,EAAA+C,MAAA,KAAAC,UAAA,KAYpBhB,GAdA,CAeF,GAAG,CAACH,KAGFlB,EAAAA,EAAAA,MAAAsC,EAAAA,SAAA,CAAA7C,SAAA,CACGuB,IAAaxB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,KACrB/C,EAAAA,EAAAA,KAACgD,EAAQ,CAAClD,SAAUA,IACnBsB,IAAgBpB,EAAAA,EAAAA,KAAA,MAAAC,SAAKmB,MAG5B,C","sources":["components/CastInfo/CastInfo.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["const CastInfo = ({ castData }) => {\n  const defaultImg =\n    'https://glavcom.ua/img/article/9139/95_main-v1678685008.jpg';\n  return castData && castData.length > 0 ? (\n    <ul>\n      {castData.map(({ profile_path, original_name, character, id }) => {\n        return (\n          <li key={id}>\n            <img\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                  : defaultImg\n              }\n              width={150}\n              alt=\"poster\"\n            />\n            <p>{original_name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  ) : (\n    <p>N/A</p>\n  );\n};\n\nexport default CastInfo;\n","import { getCastDetailsAPI } from 'api/dataMovies';\nimport CastInfo from 'components/CastInfo/CastInfo';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Cast = () => {\n  const [castData, setCastData] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n\n    const getCastDetails = async () => {\n      try {\n        setIsLoading(true);\n        setErrorMessage('');\n        const data = await getCastDetailsAPI(movieId);\n        setCastData(data.cast);\n      } catch (error) {\n        setErrorMessage(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader></Loader>}\n      <CastInfo castData={castData}></CastInfo>\n      {errorMessage && <h1>{errorMessage}</h1>}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["_ref","castData","length","_jsx","children","map","_ref2","profile_path","original_name","character","id","_jsxs","src","concat","width","alt","_useState","useState","_useState2","_slicedToArray","setCastData","_useState3","_useState4","errorMessage","setErrorMessage","_useState5","_useState6","isLoading","setIsLoading","movieId","useParams","useEffect","getCastDetails","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getCastDetailsAPI","sent","cast","t0","message","finish","stop","apply","arguments","_Fragment","Loader","CastInfo"],"sourceRoot":""}